backupDestination: /var/backups
database: postgresql # or mysql - default is postgresql
databases: # all databases if empty
  - db1
  - db2
format: gzip
  # gzip or 7zip. gzip if empty
  # gzip for postgresql doesn't use gzip directly but uses custom format to take sql dump with the same algorithm as gzip
  # for mysql; if encryption is enabled, it will use 7zip even if the format is gzip
removeLocal: true
archivePass: # Password for encrypting backups. No encryption if empty
remote:
  isRemote: false # for mysql; even if isRemote false and you are backing up as the msyql user in the local machine, you still have to provide user and password/
  host: 127.0.0.1
  port: 5432
  user: postgres        # necessary for mysql, even if isRemote false
  password: password    # necessary for mysql, even if isRemote false
s3:
  enabled: false
  region: aws region
  bucket: s3 bucket
  path: backup path
  accessKey: s3 access key
  secretKey: s3 secret key
minio:
  enabled: false
  endpoint: minio endpoint
  bucket: minio bucket
  path: backup path
  accessKey: minio access key
  secretKey: minio secret key
  secure: false
  insecureSkipVerify: false
notify:
  email:
    enabled: false
    onlyOnError: false
    info:
      smtpHost: smtp.gmail.com
      smtpPort: 587
      username: sender@example.com
      from: sender@example.com
      password: 123456
      to: recipient@example.com
    error:
      smtpHost: smtp.gmail.com
      smtpPort: 587
      username: sender@example.com
      from: sender@example.com
      password: 123456
      to: recipient@example.com
  webhook:
    enabled: false
    onlyOnError: false
    info:
      - https://webhook_url.example1.com
      - https://webhook_url.example2.com
    error:
      - https://webhook_url.example1.com
      - https://webhook_url.example2.com

log:
  enabled: true
  file: /var/log/monodb-backup.log
